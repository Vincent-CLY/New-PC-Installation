{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Change YouTube Icon","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http*://*.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_run_in":[],"orig_tags":[]}},"storage":{"ts":1722480799082,"data":{}},"enabled":true,"position":1,"uuid":"c06b88d9-4c32-44cb-adb8-f3f6b3becfed","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDaGFuZ2UgWW91VHViZSBJY29uCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMjAyNC0wNy0yNwovLyBAZGVzY3JpcHRpb24gIHRyeSB0byB0YWtlIG92ZXIgdGhlIHdvcmxkIQovLyBAYXV0aG9yICAgICAgIFlvdQovLyBAbWF0Y2ggICAgICAgIGh0dHAqOi8vKi55b3V0dWJlLmNvbS8qCi8vIEBpY29uICAgICAgICAgZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFBQUFBQ0g1QkFFS0FBRUFMQUFBQUFBQkFBRUFBQUlDVEFFQU93PT0KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIC8vIEZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgWW91VHViZSBpY29uCiAgICBmdW5jdGlvbiBjaGFuZ2VJY29uKCkgewogICAgICAgIGNvbnNvbGUubG9nKCJTdGFydCBjaGFuZ2luZyBpY29uIik7CiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGltZyBlbGVtZW50CiAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpOwoKICAgICAgICAvLyBTZXQgdGhlIHNyYyBhdHRyaWJ1dGUgb2YgdGhlIGltZyBlbGVtZW50CiAgICAgICAgaW1nLnNyYyA9ICdodHRwczovL3d3dy5pbWdob3N0Lm5ldC9pYi9zaDNBM1ZKSVRLMEM3WktfMTcyNjI5NTg4NC5naWYnOwogICAgICAgIGltZy5pZCA9ICdjaGFuZ2VkLWljb24nOwogICAgICAgIC8vIFNldCB0aGUgc3R5bGUgYXR0cmlidXRlcyBvZiB0aGUgaW1nIGVsZW1lbnQKICAgICAgICBpbWcuc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOwogICAgICAgIGltZy5zdHlsZS50b3AgPSAiMXJlbSI7CiAgICAgICAgaW1nLnN0eWxlLmxlZnQgPSAiMXJlbSI7CiAgICAgICAgaW1nLnN0eWxlLndpZHRoID0gIjMwcHgiOwogICAgICAgIGltZy5zdHlsZS5oZWlnaHQgPSAiMzBweCI7CiAgICAgICAgaW1nLnN0eWxlLnNjYWxlID0gIjEuNSI7CiAgICAgICAgaW1nLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICJ2YXIoLS15dC1zcGVjLWJhc2UtYmFja2dyb3VuZCkiOwoKICAgICAgICAvLyBHZXQgYWxsIGVsZW1lbnRzIHdpdGggaWQgI2xvZ28taWNvbgogICAgICAgIHZhciB5dEljb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2xvZ28taWNvbicpOwoKICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIGVsZW1lbnRzCiAgICAgICAgeXRJY29ucy5mb3JFYWNoKHl0SWNvbiA9PiB7CiAgICAgICAgICAgIHZhciBpY29uU2hhcGUgPSB5dEljb24ucXVlcnlTZWxlY3RvcignLnl0LXNwZWMtaWNvbi1zaGFwZScpOwogICAgICAgICAgICBpZiAoaWNvblNoYXBlKSB7CiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gaWNvblNoYXBlLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpOwogICAgICAgICAgICAgICAgaWYgKGRpdikgewogICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgaW1nIGVsZW1lbnQgYXMgdGhlIGxhc3QgY2hpbGQgb2YgdGhlIGRpdgogICAgICAgICAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbWcuY2xvbmVOb2RlKHRydWUpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8vIEZ1bmN0aW9uIHRvIGF0dGVtcHQgY2hhbmdpbmcgdGhlIGljb24gbXVsdGlwbGUgdGltZXMKICAgIGZ1bmN0aW9uIGF0dGVtcHRDaGFuZ2VJY29uKHRpbWVzKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGltZXM7IGkrKykgewogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgICAgICBjaGFuZ2VJY29uKCk7CiAgICAgICAgICAgIH0sIGkgKiAxMDAwKTsgLy8gRGVsYXkgb2YgMSBzZWNvbmQgYmV0d2VlbiBlYWNoIGF0dGVtcHQKICAgICAgICB9CiAgICB9CgogICAgLy8gU3RhcnQgYXR0ZW1wdGluZyB0byBjaGFuZ2UgdGhlIGljb24gNSB0aW1lcwogICAgYXR0ZW1wdENoYW5nZUljb24oMyk7Cgp9KSgpOwo="},{"name":"youtube_disable_polymer","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http*://*.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1722480944363,"data":{}},"enabled":true,"position":2,"uuid":"eb5fe736-ab43-4d79-a09f-451381d7f2a4","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICB5b3V0dWJlX2Rpc2FibGVfcG9seW1lcgovLyBAbmFtZXNwYWNlICAgIGxvY2FsCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBtYXRjaCAgICAgICAgaHR0cCo6Ly8qLnlvdXR1YmUuY29tLyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7CgogICAgaWYgKGhyZWYuaW5kZXhPZigiL2VtYmVkLyIpID09IC0xKSB7CiAgICAgICAgaWYgKGhyZWYuaW5kZXhPZigiZGlzYWJsZV9wb2x5bWVyIikgPT0gLTEpIHsKICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gKz0gKGhyZWYuaW5kZXhPZigiPyIpID09IC0xID8gIj8iOiImIikgKyAiZGlzYWJsZV9wb2x5bWVyPTEiOwogICAgICAgIH0KICAgIH0KfSkoKTs="},{"name":"YouTube CPU Tamer by AnimationFrame","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":true,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.youtube.com/*","https://www.youtube.com/embed/*","https://www.youtube-nocookie.com/embed/*","https://www.youtube.com/live_chat*","https://www.youtube.com/live_chat_replay*","https://music.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["/^https?://\\S+\\.(txt|png|jpg|jpeg|gif|xml|svg|manifest|log|ini)[^\\/]*$/"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1722482156627,"data":{}},"enabled":true,"position":3,"file_url":"https://update.greasyfork.org/scripts/431573/YouTube%20CPU%20Tamer%20by%20AnimationFrame.user.js","uuid":"fe974aef-a087-4817-ae70-95ca83dd9733","source":""},{"name":"YouTube JS Engine Tamer","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":true,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_run_in":[]},"run_in":null,"tags":[]},"storage":{"ts":1722482168938,"data":{}},"enabled":true,"position":4,"file_url":"https://update.greasyfork.org/scripts/473972/YouTube%20JS%20Engine%20Tamer.user.js","uuid":"2550dd19-d32f-4ab6-a167-486f88aff601","source":"","requires":[{"meta":{"name":"nextBrowserTick.min.js","url":"https://cdn.jsdelivr.net/gh/cyfung1031/userscript-supports@7221a4efffd49d852de0074ec503d4febb99f28b/library/nextBrowserTick.min.js","ts":1722482169056,"mimetype":"text/javascript"},"source":"LyoqCiAqIE1pbmlmaWVkIGJ5IGpzRGVsaXZyIHVzaW5nIFRlcnNlciB2NS4xOS4yLgogKiBPcmlnaW5hbCBmaWxlOiAvZ2gvY3lmdW5nMTAzMS91c2Vyc2NyaXB0LXN1cHBvcnRzQDcyMjFhNGVmZmZkNDlkODUyZGUwMDc0ZWM1MDNkNGZlYmI5OWYyOGIvbGlicmFyeS9uZXh0QnJvd3NlclRpY2suanMKICoKICogRG8gTk9UIHVzZSBTUkkgd2l0aCBkeW5hbWljYWxseSBnZW5lcmF0ZWQgZmlsZXMhIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vd3d3LmpzZGVsaXZyLmNvbS91c2luZy1zcmktd2l0aC1keW5hbWljLWZpbGVzCiAqLwohZnVuY3Rpb24oZSl7InVzZSBzdHJpY3QiO2lmKGUubmV4dEJyb3dzZXJUaWNrKXJldHVybjtpZighZnVuY3Rpb24oKXtpZihlLnBvc3RNZXNzYWdlJiYhZS5pbXBvcnRTY3JpcHRzJiZlLmFkZEV2ZW50TGlzdGVuZXIpe2xldCB0PSEwLHM9KCk9Pnt0PSExfTtyZXR1cm4gZS5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIixzLCExKSxlLnBvc3RNZXNzYWdlKCIiLCIqIiksZS5yZW1vdmVFdmVudExpc3RlbmVyKCJtZXNzYWdlIixzLCExKSx0fX0oKSlyZXR1cm4gdm9pZCBjb25zb2xlLndhcm4oIllvdXIgYnJvd3NlciBlbnZpcm9ubWVudCBjYW5ub3QgdXNlIG5leHRCcm93c2VyVGljayIpO2NvbnN0IHQ9KGFzeW5jKCk9Pnt9KSgpLmNvbnN0cnVjdG9yLHM9KChlLHMpPT57Y29uc3Qgbj0odCxuKT0+e2U9dCxzPW59O3JldHVybiBjbGFzcyBleHRlbmRzIHR7Y29uc3RydWN0b3IodD1uKXtzdXBlcih0KSx0PT09biYmKHRoaXMucmVzb2x2ZT1lLHRoaXMucmVqZWN0PXMpfX19KSgpO2xldCBuLHI9bnVsbDtkb3tuPWAkJG5leHRCcm93c2VyVGljayQkJHsoTWF0aC5yYW5kb20oKSs4KS50b1N0cmluZygpLnNsaWNlKDIpfSQkYH13aGlsZShuIGluIGUpO2NvbnN0IG89bjtlW29dPTE7ZS5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwoZT0+eyhudWxsIT09cj8oZXx8MCkuZGF0YTowKT09PW8mJmUuc291cmNlPT09KGUudGFyZ2V0fHwxKSYmci5yZXNvbHZlKHI9bnVsbCl9KSwhMSksZS5uZXh0QnJvd3NlclRpY2s9dD0+e3J8fChyPW5ldyBzLGUucG9zdE1lc3NhZ2UobywiKiIpKSxyLnRoZW4odCkuY2F0Y2goY29uc29sZS53YXJuKX19KCJ1bmRlZmluZWQiPT10eXBlb2Ygc2VsZj8idW5kZWZpbmVkIj09dHlwZW9mIGdsb2JhbD90aGlzOmdsb2JhbDpzZWxmKTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9L3NtLzFlYWY0MTVjYjA2NWIwOGE4MTA1ZWFkY2ZiMjhlNGFhNjNmNGMxZGIyYmM0ODAxMmJkYmE0OTU5OTE5YWQ1NzMubWFw"}]}]}